[T1191 - Execution/Defense Evasion - cmstp]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = Adversaries may supply CMSTP.exe with INF files infected with malicious commands.2 Similar to Regsvr32 / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs3 and/or COM scriptlets (SCT) from remote servers.45 This execution may also bypass AppLocker and other whitelisting defenses since CMSTP.exe is a legitimate, signed Microsoft application.\
\
https://attack.mitre.org/wiki/Technique/T1191
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","EventCode"]
display.events.type = raw
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new cmstp.exe NewProcessName="C:\\Windows\\System32\\cmstp.exe" \
| rex field=CommandLine "cmstp.exe\s(?<Resource>.*)"\
| eval Resource=lower(Resource)\
| eval Severity=if(match(Resource,"http"),"Critical","Low") \
| eval Category="Execution"\
| eval Technique="CMSTP", ID="T1191"\
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1170 - Execution/Defense Evasion - mshts]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = Adversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","EventCode"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = eventtype=hunting_windows_process_new index=wineventlog CommandLine="mshta*" \
| rex field=CommandLine "mshta\s(?<Resource>.*)"\
| rex field=CommandLine ".*script:(?<Resource>.*)\"" \
| eval Resource=lower(Resource)\
| eval Resource=rtrim(Resource, "\"\"\)") \
| eval Severity=if(match(CommandLine,"http"),"Critical","Medium") \
| eval Category=mvappend("Execution", "Defense Evasion") \
| eval Technique="MSHTA",ID="T1170"\
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (rcsi.exe)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*rcsi.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (WinDbg)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*WinDbg.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (Tracker)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*tracker.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (MSBuild)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*MSBuild.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (DNX)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*dnx.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1127 - Execution/Defense Evasion - Trusted Developer Utilities (CDB)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.\
\
https://attack.mitre.org/wiki/Technique/T1127
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="*" CommandLine="*cdb.exe *"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "msbuild.exe\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "aaaa"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Privilege Escalation") \
| eval Technique="Trusted Developer Utilities (MSBuild)", ID="T1127" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1121 - Execution/Defense Evasion - Regsvcs/Regasm]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = 0 6 * * 1
description = Adversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration\
\
https://attack.mitre.org/wiki/Technique/T1121
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = eventtype=hunting_windows_process_new index=wineventlog (NewProcessName="C:\\Windows\\Microsoft.NET\\Framework*\\RegAsm.exe" OR NewProcessName="C:\\Windows\\Microsoft.NET\\Framework*\\RegSvcs.exe" )\
| rex field=CommandLine ".*\.exe\s(?<Resource>.*).*" \
| eval Resource=lower(Resource) \
| eval Severity=if(match(Resource,"/u"),"Critical","Medium") \
| eval Category=mvappend("Execution", "Defense Evasion") \
| eval Technique="Regsvcs/Regasm", ID="T1121" \
| table _time HostName UserName CommandLine ParentProcessName NewProcessName Resource Severity Technique Category ID

[T1118 - Execution/Defense Evasion - InstallUtil]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary\
\
https://attack.mitre.org/wiki/Technique/T1118
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","EventCode"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = eventtype=hunting_windows_process_new index=wineventlog InstallUtil NewProcessName="C:\\Windows\\Microsoft.NET\\Framework*\\InstallUtil.exe"\
| rex field=CommandLine ".*\.exe\s(?<Resource>.*).*"\
| eval Resource=lower(Resource)\
| eval Severity=if(match(Resource,"/u"),"Critical","Medium") \
| eval Category=mvappend("Execution", "Defense Evasion") \
| eval Technique="InstallUtil", ID="T1118"\
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1117 - Execution/Defense Evasion - Regsvr32]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
description = Adversaries may take advantage of regsvr32's functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.\
\
https://attack.mitre.org/wiki/Technique/T1117
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["host","source","sourcetype","EventCode"]
display.events.type = raw
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.format.0 = color
display.statistics.format.0.colorPalette = map
display.statistics.format.0.colorPalette.colors = {"Low":#65A637,"Medium":#ED8440,"Critical":#D93F3C}
display.statistics.format.0.field = Severity
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = eventtype=hunting_windows_process_new index=wineventlog NewProcessName="C:\\Windows\\System32\\regsvr32.exe" CommandLine="regsvr32.exe  /s /u /i:* scrobj.dll"\
| rex field=CommandLine "i:(?<Resource>.*)\s"\
| eval Resource=lower(Resource)\
| eval Severity=if(match(CommandLine,"http"),"Critical","Medium") \
| eval Category=mvappend("Execution", "Defense Evasion") \
| eval Technique="Regsvr32", ID="T1156"\
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1086 - Execution - PowerShell (NoProfile)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -15m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new CommandLine="*\\powershell.exe*" (CommandLine="* -nop *" OR  CommandLine="* -nopr *" OR CommandLine="* -nopro *" OR CommandLine="* -noprof *" OR CommandLine="* -noprofi *" OR CommandLine="* -noprofil *")\
| eval CommandLine=lower(CommandLine) \
| rex field=CommandLine ".*exe\"\s(?<Resource>.*)" \
| eval Severity=if(match(Resource, "http"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Persistence", "Privilege Escalation") \
| eval Technique="PowerShell (No Profile", ID="T1086" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1086 - Execution - PowerShell (EncodedCommand)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -7d@h
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new CommandLine="*\\powershell.exe*" (CommandLine="* -enc *" OR CommandLine="* -enco *" OR CommandLine="* -encod *" OR CommandLine="* -encode *" OR CommandLine="* -encoded *" OR CommandLine="* -encodedc *" OR CommandLine="* -encodedco *" OR CommandLine="* -encodedcom *" OR CommandLine="* -encodedcomm *" OR CommandLine="* -encodedcomma *" OR CommandLine="* -encodedcomman *")\
| eval CommandLine=lower(CommandLine) \
| rex field=CommandLine ".*-enc\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-enco\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-enco\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-encod\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-encode\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-encoded\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-encodedc\s(?<Resource>\S+)"\
| rex field=CommandLine ".*-encodedco\s(?<Resource>\S+)" \
| rex field=CommandLine ".*-encodedcom\s(?<Resource>\S+)" \
| rex field=CommandLine ".*-encodedcomm\s(?<Resource>\S+)" \
| rex field=CommandLine ".*-encodedcomma\s(?<Resource>\S+)" \
| rex field=CommandLine ".*-encodedcomman\s(?<Resource>\S+)" \
| eval Severity=if(match(Resource, "http"), "Critical", "Low") \
| eval Category=mvappend("Execution", "Persistence", "Privilege Escalation") \
| eval Technique="PowerShell (No Profile", ID="T1086" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1053 - Execution/Persistence/Privilege Escalation - Scheduled Task (At.exe)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */5 * * * *
description = An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.\
\
https://attack.mitre.org/wiki/Technique/T1053
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="at*"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "schtasks\s(?<Resource>.*)" \
| eval Remote=if(match(Resource, "/ru"), "Remote", "Local")\
| eval Severity=if(Remote="Remote", "Critical", "Low") \
| eval Category=mvappend("Execution", "Persistence", "Privilege Escalation") \
| eval Technique="Scheduled Task (Remote)", ID="T1053" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1053 - Execution/Persistence/Privilege Escalation - Scheduled Task (Local)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */5 * * * *
description = An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.\
\
https://attack.mitre.org/wiki/Technique/T1053
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="schtasks*"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "schtasks\s(?<Resource>.*)" \
| eval Remote=if(match(Resource, "/RU"), "Remote", "Local")\
| where Remote="Local"\
| eval Severity=if(Remote="Remote", "Critical", "Low") \
| eval Category=mvappend("Execution", "Persistence", "Privilege Escalation") \
| eval Technique="Scheduled Task - Local Schtasks", ID="T1053" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1053 - Execution/Persistence/Privilege Escalation - Scheduled Task (Remote)]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */5 * * * *
description = An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.\
\
https://attack.mitre.org/wiki/Technique/T1053
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress","NewProcessName","CommandLine","ParentProcessName"]
display.events.rowNumbers = 1
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.rowNumbers = 1
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=wineventlog eventtype=hunting_windows_process_new ParentProcessName="C:\\Windows\\System32\\cmd.exe" CommandLine="schtasks*"\
| eval CommandLine=lower(CommandLine)\
| rex field=CommandLine "schtasks\s(?<Resource>.*)" \
| eval Remote=if(match(Resource, "/ru"), "Remote", "Local")\
| where Remote="Remote"\
| eval Severity=if(Remote="Remote", "Critical", "Low") \
| eval Category=mvappend("Execution", "Persistence", "Privilege Escalation") \
| eval Technique="Scheduled Task (Remote)", ID="T1053" \
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID

[T1064 - Execution/Defense Evasion - Office spawning scritp]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index._name = hunting_windows
alert.suppress = 0
alert.track = 0
cron_schedule = */5 * * * *
description = Scripts can be embedded inside Office documents as macros that can be set to execute when files used in Spearphishing Attachment and other types of spearphishing are opened. Malicious embedded macros are an alternative means of execution than software exploitation through Exploitation for Client Execution, where adversaries will rely on macos being allowed or that the user will accept to activate them.\
\
https://attack.mitre.org/wiki/Technique/T1064
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["EventCode","subject","DestAddress"]
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = hunting_in_windows
request.ui_dispatch_view = search
search = index=* eventtype=hunting_windows_* (ParentProcessName="*WINWORD.EXE" OR ParentProcessName="*EXCEL.EXE" OR ParentProcessName="*POWERPOINT.EXE") (NewProcessName="*powershell.exe" OR NewProcessName="*cmd.exe" OR NewProcessName="*wscript.exe" OR NewProcessName="*cscritp.exe")\
| rex field=CommandLine "powershell.exe\s(?<Resource>.*)"\
| eval Resource=lower(Resource)\
| eval Severity=if(match(Resource, "http"), "Critical", "Low")\
| eval Category=mvappend("Execution", "Defense Evasion") \
| eval Technique="Office Spawning Scritp", ID="T1064"\
| table _time HostName UserName CommandLine ParentProcessName Resource Severity Technique Category ID
